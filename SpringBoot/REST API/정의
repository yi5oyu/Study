API
 - 다양한 소프트웨어 애플리케이션이 서로 통신할 수 있도록 하는 일련의 규칙 및 프로토콜

REST API
 - REST(Representational State Transfer) 아키텍처 스타일을 따르는 API
 - REST 아키텍처
  1. 클라이언트-서버 아키텍처
   : 클라이언트(UI/UX)와 서버(데이터, 로직, 리소스 등...)를 분리
    = 이식성과 확장성을 향상
  2. 무상태(Statelessness)
   : 서버에 클라이언트 컨텍스트가 저장되지 않음
    = 각 클라이언트 요청에는 서버가 이를 이해하고 처리하는 데 필요한 모든 정보가 포함되어야 함(서버는 세션 정보를 저장할 필요가 없음)
  3. 캐시 가용성(Cacheability) 
   : 명시적 캐싱 규칙
    = 서버 응답은 클라이언트가 오래되거나 부적절한 데이터를 재사용하는 것을 방지하기 위해 캐시 가능/불가능으로 정의(HTTP 캐시 헤더 사용해 정의됨)
   : 응답 재사용
    = 캐시 가능할 경우 클라이언트는 후속 요청에 응답 데이터 재사용 가능
     * Cache-Control: max-age=3600
  4. 균일한 인터페이스 
   : 클라이언트와 서버 간의 통일된 인터페이스(클라이언트와 서버 간의 통신을 위한 표준화된 방법으로 아키텍처를 단순화하고 분리)
    = 아키텍처 단순화, 상호 작용 가시성 향상
    0. 리소스 식별
     - 모든 리소스 URI(Uniform Resource Identifier)로 고유하게 식별
      * https://restapi.example.com/users/123
    0. 데이터 형식에 따른 리소스 조작
     - JSON or XML 사용하여 리소스와 상호 작용
    0. 자기 설명 메시지
     - 각 메시지에는 처리 방법을 설명하기에 충분한 정보가 포함되어 있음
      * Content-Type, Accept 같은 HTTP 헤더
    0. HATEOAS(Hypermedia as the Engine of Application State)
     - 클라이언트는 서버에서 동적으로 제공하는 링크를 따라 애플리케이션 탐색
      * /users?page=2 (리소스 링크 포함)
  5. 계층형 시스템(Layered System)
   - 각각 특정 기능을 가진 계층적 레이어로 구성
   - 확장성
    : 레이어를 독립적으로 확장하여 성능을 최적화할 수 있음
   - 보안
    : 계층별 보안 정책 시행 가능
   - 관리성
    : 계층 내에서 문제를 격리하여 유지 관리를 단순화
 - 장점
  : 단순성(표준 HTTP 메소드 및 상태 코드를 활용)
  : 확장성(상태 비저장 및 캐시 가능성은 확장성을 향상)
  : 유연성(다양한 유형의 통화를 처리하고 다양한 데이터 형식을 반환 가능)
  : 성능(JSON과 같은 경량 데이터 교환 형식은 성능을 향상)
  : 독립성(HTTP를 지원하는 모든 프로그래밍 언어와 함께 사용할 수 있음)

RESTful API
 - REST 아키텍처 원칙 준수(표준 HTTP 방법을 사용하여 웹 서비스와 상호 작용)
 - 생성, 읽기, 업데이트, 삭제할 수 있는 리소스로 처리(CRUD)
 - HTTP 메소드
  : GET 리소스 조회
  : POST 데이터 추가, 등록
  : PUT 리소스 수정(없으면 추가)
  : PATCH 리소스 부분 변경
  : DELETE 리소스 삭제
  : HEAD 리소스 조회(GET)(HTTP body 부분 제외하고 조회)
  : OPTIONS 통신 옵션 확인(메소드, 헤더 등...)
 - 데이터 형식
  : JSON(JavaScript Object Notation)/XML(eXtensible Markup Language)

REST API 설계
 - 명명 규칙
  : 리소스 명사 사용
   * /users, /orders
  : 컬렉션 복수 명사 사용

* HATEOAS
 - REST를 다른 네트워크 애플리케이션 아키텍처와 구별하는 제약 조건
 - 클라이언트가 응용 프로그램 서버에서 동적으로 제공하는 하이퍼미디어를 통해 전적으로 네트워크 응용 프로그램과 상호 작용하는 것을 제안
