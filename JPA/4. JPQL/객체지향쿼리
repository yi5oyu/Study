객체지향 쿼리
 - 객체를 대상으로 검색 / SQL을 추상화해서 특정 SQL에 의존하지 않음
 - 엔티티 객체를 대상으로 함
 - JPQL을 분석한 다음 적절한 SQL을 만들어 DB조회. 조회한 결과로 엔티티 객체를 생성해서 반환

JPA 지원하는 기능
 - JPQL
 - Criteria 쿼리
   | JPQL을 편하게 작성하도록 도와주는 API, 빌더 클래스 모음
 - 네이티브 SQL
   | 직접 SQL 사용
 - QureyDSL
   | 오픈 소스 프레임 워크 Criteria와 비슷
 - JDBC 직접사용(MyBatis 같은 SQL Mapper 프레임워크 사용)
   | JDBC 직접 사용

- JPQL
 엔티티 객체를 조회하는 객체지향 쿼리 (ANSI 표준 SQL이 제공하는 기능을 유사하게 지원)
 특정 DB에 의존하지 않음. DB 방언(Dialect)만 변경하면 JPQL을 수정하지 않아도 DB를 변경할 수 있음 
 SQL보다 간결
 테이블과 칼럼 이름 대신 매핑한 엔티티 이름과 속성 이름을 사용
 * 기본 구조
  select 별칭 from 엔티티이름 as 별칭
  - @Entity를 적용한 클래스 이름(@Entity name 속성으로 지정한 이름 사용)
  - 별칭 필수(as 생략가능), JPQL에서 엔티티를 참조할 때 사용할 이름
  - select 별칭: 선택할 대상
 * JPQL 사용
  String jpql = "select m from Member as m where m.username = 'lee'";
  (모든 Member 선택: select m, m.username은 엔티티 객체의 필드명)
  List<Member> resultList = em.createQuery(jpql, Member.class).getResultList();
  (EntityManager 객체의 createQuery 메소드로 Query 생성, select의 결과의 타입을 두번째 인자 값으로 전달)

- Criteria 쿼리
 JPQL을 생성하는 빌더 클래스
 프로그래밍 코드로 JPQL을 작성(컴파일시 오류 발견 / 동적 쿼리 작성 편함)
 CriteriaBuilder cb = em.getCriteriaBuiler();
 CriteriaQuery<Member> query = cb.createQuery(Member.class);
 Root<Member> m = query.from(Member.class);
 (조회를 시작할 클래스)
 CriteriaQuery<Member> cq = query.select(m).where(cb.equal(m.get("username"), "lee"));
 (필드명을 문자로 작성)
 List<Member> resultList = em.createQuery(cq).getResultList();
- QueryDSL
 복잡한 Criteria를 대신해 사용할 수 있는 JPQL 빌드 클래스
 코드 기반, 단순하고 사용하기 쉬움
 JPAQuery query = new JPAQuery(em);
 QMember member = QMember.member;
 (Member 클래스 기반으로 생성한 QueryDSL 쿼리 전용 클래스)
 List<Member> members = 
       query.from(member).
       here(member.username.eq("lee")).
       list(member);

- 네이티브 SQL
 특정 DB에 의존하는 기능을 사용해야 할 때 사용 / SQL은 지원하지만 JPQL이 지원하지 않는 경우
 String sql = "select ID, AGE, TEAM_ID, NAME from MEMBER where NAME = 'lee'";
 List<Member> resultList = em.createNativeQuery(sql, Member.class).getResultList();
 (db를 변경하면 네이티브 SQL도 수정해야함)
