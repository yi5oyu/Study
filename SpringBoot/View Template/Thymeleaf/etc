https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#appendix-a-expression-basic-objects
 - ${#ctx}
 - ${#locale} : 현재 사용되는 로케일을 가져옴. ex) ko
 - ${param.변수명} == ${변수명}
  모든 요청 속성은 자동으로 컨텍스트의 루트 변수로 추가. 액세스할 때 네임스페이스를 명시할 필요가 없음
  model.addAttribute("변수명", 값);
 - ${session.변수명}
  HttpSession session = request.getSession();
  session.setAttribute("변수명", 값);
 - ${application.변수명}
  HttpServletRequest request;
  request.getServletContext().setAttribute("변수명", 값);

https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#appendix-b-expression-utility-objects
 - ${#execInfo} : 처리 중인 템플릿에 관한 유용한 정보를 제공
 - ${#messages} : 외부화된 메시지를 얻는 유틸리티 메서드 (messages.properties에 작성된 키 값을 가져옴)
   <p th:text="${#messages.msg('registration.success', ${user.firstName}, ${user.lastName})}"></p>
   => messages.properties -> registration.success=Congratulations, {0} {1}! You have successfully registered.
 - ${#uris} : 안전한 URI/URL을 생성하고 처리
 - ${#conversions} : 템플릿의 어느 지점에서든 객체를 원하는 형식으로 변환
 - ${#dates} : 다양한 날짜 및 시간 작업을 수행 (java.util.Date)
 - ${#calendars} : 다양한 캘린더 작업을 수행 (java.util.Calendar)
 - ${#temporals} : JDK8+ java.time API의 날짜/시간 객체 처리 (java.time)
 - ${#numbers} 
 - ${#strings} 
 - ${#objects} 
 - ${#bools} 
 - ${#arrays} 
 - ${#lists} 
 - ${#sets} 
 - ${#maps} 
 - ${#aggregates} : 배열 또는 컬렉션에 대한 집계
 - ${#ids} : 반복될 수 있는 id 속성을 처리

https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#appendix-c-markup-selector-syntax
 마크업 선택

  ``` javadoc API ```
  org.thymeleaf.context.WebRequestParamsVariablesMap. 
   컨텍스트 객체가 아니라 변수로서 컨텍스트에 추가된 맵
    모델에 데이터를 추가하면 Thymeleaf에서 해당 변수들을 사용할 수 있음, 일부 기본 객체를 제공
    기본 객체들이 컨텍스트 객체에 직접 포함되는 것이 아니라 변수로 추가됨
    컨텍스트에 변수로 추가된 맵 형태로 제공
   - # 없이  액세스할 수 있음
   
  param, session, application
  ${session.size()}
   - 세션의 크기
  ${session.isEmpty()} 
   - 세션이 비어 있는지 확인
  ${session.containsKey('key')} 
  'key' 세션 속성이 있는지 확인
  
  ``` javadoc API ```
