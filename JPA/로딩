로딩(Loading): 데이터베이스에서 엔티티와 그 연관된 엔티티들을 언제 가져올지를 결정하는 방식

EAGER 로딩(즉시 로딩): 작고 필수적인 데이터에 적합
 - 조회할때 EAGER 설정된 데이터 같이 가져옴
 - 단일 엔티티 조회 시 한 번의 쿼리로, 컬렉션 조회 시 여러 쿼리로 데이터를 한번에 가져옴
  > 단일 엔티티 조회 시(JOIN 사용)
   - JOIN 사용: @ManyToOne, @OneToOne(1:1 관계라 데이터 중복 없음)
  > 컬렉션 조회 시(N+1 문제 발생: JOIN 시 데이터 중복 -> 별도 쿼리 사용)
   - 별도 SELECT: @OneToMany, @ManyToMany(1:N 관계에서 JOIN 시 데이터 중복 발생)
 - 메모리에 모든 데이터가 바로 로드됨
 - @OneToOne, @ManyToOne: EAGER가 기본값

 사용하는 경우
  1. 연관 관계에서 하위가 필수인 경우
   - 연관된 데이터를 거의 항상 함께 사용하는 경우
  2. 작은 데이터셋의 설정/메타데이터
   - 데이터 양이 적은 경우, 항상 필요한 내용
  3. 단일 엔티티 조회에서 N+1 문제를 피하고 싶은 경우 

LAZY 로딩(지연 로딩): 크고 선택적인 데이터에 적합
 - 조회할때 LAZY 설정된 데이터 안 가져옴
 - 실제로 사용할 때 추가 쿼리로 가져옴(추가 쿼리 발생)
 - 프록시 객체를 사용해서 지연 로딩 구현
 - @OneToMany, @ManyToMany: LAZY가 기본값

 사용하는 경우
  1. 목록 조회에서 연관 데이터가 선택적인 경우
   - 연관된 데이터를 가끔만 사용하는 경우
  2. 대용량 데이터 처리
   - 성능 최적화가 중요한 경우
  3. 조건부 로딩이 필요한 경우
   - 메모리 사용량을 줄이고 싶은 경우

 LazyInitializationException: 세션 없이 LAZY 로딩 시도
  - LAZY 로딩으로 설정된 연관 엔티티에 접근할 때, 세션이 이미 닫혀서 데이터를 가져올 수 없을 때 발생하는 예외
  - 세션(Session) 생명주기: 메서드가 끝나면 @Transactional에 의해 세션이 닫힘
   > DTO 사용
   > @Transactional 범위 확장
   > 세션 닫히기 전에 미리 로딩
   > Fetch Join 사용

---

  @Entity
  public class User {
      @Id
      private Long id;
      private String name;
  
      @OneToMany(fetch = FetchType.EAGER) // 즉시 로딩
      @OneToMany(fetch = FetchType.LAZY) // 지연 로딩
      private List<Order> orders;
  }

User user = userRepository.findById(1L);  

데이터 로딩 시점
 - EAGER: 이 시점에 User + Orders 모두 메모리에 로드됨
 - LAZY: 이 시점에는 User만 로드, Orders는 프록시 객체(Orders를 실제로 사용할때 로드됨)

메모리 사용 패턴
 - EAGER: 메모리 사용량 예측 가능
  > 항상 User + Orders 모든 데이터가 메모리에 적재
 - LAZY: 메모리 사용량 최적화
  > 필요한 시점에만 메모리에 적재

쿼리 실행 시점
 - EAGER: 즉시 실행(예측 가능)
  > 실행 시점에 모든 쿼리 실행 완료
 - LAZY: 지연 실행(예측 어려움)
  > 기본 쿼리만 실행, 추가적인 DB 접근 발생

성능
 - EAGER: 예측 가능한 성능
  > 1회 DB 접근으로 모든 데이터 로드(메모리에서 조회하므로 빠름)
  > 불필요한 데이터 로드로 메모리 부담 증가 가능
 - LAZY: 최적화된 메모리 사용
  > 빠른 초기 로딩(추가 데이터에는 DB 접근 발생)

---

프록시 객체: 실제 객체를 대신해 객체에 대한 접근을 제어하거나 기능을 확장하는 객체
 - 실제 객체를 참조하고 필요할때 진짜 객체 생성/실제 작업 수행
 - 실제 객체와 같은 인터페이스 제공
 > 성능 최적화, 메모리 절약, 접근 제어

 JPA/Hibernate 프록시
  - 프록시 객체 메서드 호출 >가로채기> 초기화 필요한지 확인 > 세션 확인 > DB 쿼리 실행 > 실제 객체로 교체, initialized=true

  public class HibernateProxy {
      private Object target;                  // 실제 엔티티
      private EntityKey entityKey;            // 엔티티 식별자
      private SessionImplementor session;     // Hibernate 세션
      private boolean initialized;            // 초기화 여부
      private MethodInterceptor interceptor;  // 메서드 가로채기
  }

데이터 불일치: 시점에 따른 데이터 일관성, 동시성 문제
 - 트랜잭션 내에서는 프록시 상태인데 다른 트랜잭션에서 원본 데이터가 변경될 경우 이전 프록시 상태를 가지고 있으면우 변경 전 데이터를 조회함

 동시성 환경
  Thread 1: 데이터 조회(프록시 상태)
  Thread 2: 데이터 추가
  Thread 1: 프록시 초기화(변경사항 반영 안됨) 
   - 이전 데이터를 가지게 됨

 캐시 사용
  - DB에는 새 데이터 추가되었지만 캐시는 이전 상태
  - 프록시 초기화 시 캐시된 이전 데이터 사용 가능

 해결 방법
  1. 명시적 초기화(프록시 객체 즉시 초기화)
  2. Fetch Join으로 우회(프록시 없이 실제 데이터 사용)
  3. 트랜잭션 범위 확장(랜잭션 내에서 모든 LAZY 데이터 접근)
  4. 리프레시로 최신 데이터 보장
