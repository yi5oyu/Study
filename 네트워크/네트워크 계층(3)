LAN을 넘어 다른 네트워크와의 통신을 위한 네트워크 계층
 IP주소를 통한 송수신지 대상 지정
 라우팅을 통한 다른 네트워크 통신(최적의 경로)

  데이터 링크 계층 한계
   - 다른 네트워크까지의 도달 경로 파악 어려움
    : 라우팅(패킷이 이동할 최적의 경로 결정)
    : 라우터(라우팅을 수행하는 장비)
   - 모든 네트워크에 속한 모든 호스트 위치 특정하기 어려움
    : MAC 주소만으로는 모든 네트워크에 속한 모든 호스트 위치 특정하기 어려움(MAC 주소와 IP 주소는 함께 사용, IP 주소 우선 활용)
    : IP주소(수신지) / MAC 주소(수신인)

  IP(인터넷 프로토콜)
    - 네트워크 계층의 대표적인 프로토콜
    - 물리/데이터 링크 계층의 한계 극복을 위한 프로토콜
    - IPv4/IPv6

    - 기능 (RFC 791)
     : 주소 지정(IP주소를 바탕으로 송수신 대상 지정)
      = 4바이트로 하나의 주소 표현(192.168.1.1)
      * 구조
       - 네트워크 주소와 호스트 주소로 구성(172.16(네트워크 주소).12.45(호스트 주소))
        : 네트워크 주소(호스트가 속한 특정 네트워크 식별)
        : 호스트 주소(특정 호스트 식별)
         = 네트워크 주소와 호스트 주소 크기는 달라질 수 있음(호스트 할당 개수에 따라 다름)
          - IP 주소 클래스(네트워크 크기에 따라 IP 주소를 분류하는 기준)
          ex) 네트워크주소.호스트주소.호스트주소.호스트주소(A 클래스) or 네트워크주소.네트워크주소.네트워크주소.호스트주소(C 클래스)
           1) A클래스: 처음 옥텟 주소가 0 ~ 127일경우(0.0.0.0 ~ 127.255.255.255)
           1) B클래스: 처음 옥텟 주소가 128 ~ 191일경우(128.0.0.0 ~ 191.255.255.255)
           1) C클래스: 처음 옥텟 주소가 192 ~ 223일경우(192.0.0.0 ~ 223.255.255.255)
           = 호스트의 주소 공간
            : 호스트의 주소 공간을 모두 사용할 수 있는 것은 아님
             ex) 172.16.0.0: 0.0 - 네트워크 자체를 의미하는 네트워크 주소(호스트 주소가 모두 0)
             ex) 172.16.255.255: 255.255 - 브로드캐스트 주소로 사용(호스트 주소가 모두 1)
          - 클래스리스 주소 체계
           : 클래스별 네트워크 크기는 고정되어있어 정해진 크기안에서만 사용해야함
           : 유동적이고 정교한 네트워크 구성 가능
            = 서브넷 마스크(subnet mask)
             - 클래스 없이 IP 주소의 네트워크 주소, 호스트 주소 구분
             - 세브넷 마스크로 표현된 클래스: A클래스(255.0.0.0), B클래스(255.255.255.0), C클래스(255.255.255.0)
             * 서브네팅(subnnetting)
              - 서브넷 마스크를 이용해 클래스를 원하는 크기로 잘게 쪼개어 사용
              - IP주소와 서브넷 마스크를 비트 AND 연산의 결과가 네트워크 주소
               ex) IP주소(192.168.219.103), 서브넷 마스크(255.255.255.0)
                     11000000.10101000.11011011.01100111
                     11111111.11111111.11111111.00000000
                   = 11000000.10101000.11011011.00000000 (192.168.219.0)
             * CIDR(Classless Inter-Domain Routing notation) 표기법
              - IP주소/세브넷 마스크 1의 개수
               ex) 192.168.219.103/25 (IP주소: 192.168.219.103, 서브넷마스크: 255.255.255.128(11111111.11111111.11111111.10000000))
                   네트워크 주소, 브로드캐스트 주소를 뺸 126개의 호스트를 할당할 수 있음
     : 단편화(전송하고자 하는 패킷의 크기를 MTU 이하의 복수의 패킷으로 나누는것)
      = MTU(Maximum Transmission Unit)
       : 한 번에 전송 가능한 IP패킷의 최대 크기(1500바이트)
       : IP 패킷의 헤더도 MTU크기에 포함
       : 나누어진 패킷은 수신지에 도착해 다시 재조합됨
       * 단편화 피하기
        - 불필요한 트래픽 증가, 대역폭 낭비
        - 재조합과정에서 발생하는 부하(성능 저하 요소)
        - 주고 받을 수 있는 최대 크기만큼 전송해야함
         : 처리 가능한 MTU만큼 단편화 해야함
          = 경로 MTU(Path MTU): IP단편화 없이 주고 받을 수 있는 최대 크기
            (호스트(3)-라우터(2)-호스트(4)일때 최대크기인 2만큼 전송해야함)
          = 경로 MTU 발견(Path MTU discovery): 경로 MTU를 구하고 해당 크기만큼만 송수신
 
    - IPv4
     : 프레임의 페이로드로 데이터 필드에 명시됨
      1) 식별자(패킷에 할당된 번호)
       = 어떤 데이터에서 쪼개졌는지 알기 위해 사용
      2) 플래그
       = 첫번째 비트: 항상 0(사용되지 않음)
       = 두번째 비트: DF(Don't Fragment) 비트 - IP 단편화를 수행하지 말라는 표시(1:단편화불가능/0:단편화가능)
       = 세번째 비트: MF(More Fragment) 비트 - 단편환된 패킷이 더 있는지를 나타냄(1:더있음/0:마지막)
      3) 단편화 오프셋
       = 초기 데이터에서 몇 번째로 떨어진 패킷인지 나타냄(순서대로 재조합하기 위해 필요)
      4) TTL(Time To Live)
       = 패킷의 수명(무의미한 패킷이 네트워크상에 지속적으로 남아있는 것을 방지)
       = 패킷이 하나의 라우터를 거칠 때마다 TTL이 1씩 감소(0이 되면 폐기)
       = 홉(hop): 패킷이 호스트 or 라우터에 한 번 전달되는것(TTL 필드 값은 홉마다 1씩 감소)
      5) 프로토콜
       = 상위 계층의 프로토콜이 무엇인지 나타냄(다음 계층인 전송 계층에서 TCP:6/UDP:17)
      6) 송신지 IP주소
      7) 수신지 IP주소

    - IPv6
     : IPv4 주소 고갈
     : 16바이트 주소 표현(2001:0233:abcd:ffff:0000:0000:ffff:1111)
      1) 다음 헤더
       = 상위 계층의 프로토콜 or 확장 헤더를 가리키는 필드(기본 헤더 + 확장 헤더)
       = 다양한 종류의 헤더가 있음(홉 간 옵션, 수신지 옵션, 라우팅, 단편, ESP...)
        : IPv6 단편화
         - 단편화 확장 헤더를 통해 단편화됨
         - 단편화 확장 헤더에도 다음 헤더 필드 있음(확장 헤더 + 다음 헤더)
          1) 예약됨(reserved)/예약(res): 0으로 설정(사용되지 않음)
          2) 단편화 오프셋(IPv4의 단편화 오프셋)
          3) M 플래그(IPv4의 MF 플래그)
          4) 식별자(IPv4의 식별자)
      2) 홉 제한(IPv4의 TTL)
      3) 송신시 IP주소
      4) 수신지 IP주소

    - ARP(Address Resolution Protocol)
     : IP주소를 통해 MAC주소를 알아내는 프로토콜(통일 네트워크 내에 있는 송수신 대상의 IP주소를 통해 MAC주소 알아냄)
     : IP 주소는 알지만 MAC 주소 모를 때 사용
      1) ARP 요청
       = 브로드캐스트 메시지 전송 - 브로드캐스트 메시지(ARP 패킷)를 모든 호스트에 보냄
      2) ARP 응답
       = 보낸 IP와 일치하면 해당 호스트는 응답을 받고 MAC 주소 유니캐스트 메시지를 다시 전송
      3) ARP 테이블 갱신
       = ARP 요청/응답으로 알게 된 IP주소, MAC주소 연관관계 매핑
       = 일정 시간이 지나면 삭제(임의 삭제도 가능)
       = 테이블에 등록된 호스트는 ARP요청 보낼 필요 없음
     : ARP 패킷(ARP 요청/응답에서 송수신되는 패킷)
      1) 오퍼레이션 코드: ARP 요청(1), ARP 응답(2)
      2) 송/수신지 하드웨어 주소: MAC 주소
      3) 송/수신지 프로토콜 주소: IP 주소

    - 공인 IP 주소
     : 전 세계에서 고유한 IP주소
     : 네트워크 간 통신(인터넷을 이용할 때 사용하는 IP주소)
    - 사설 IP 주소
     : 사설 네트워크에서 사용하기 위한 IP주소
     : 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16
     : 라우터(공유기)가 사설 IP 주소 할당
     : 내트워크 안에서만 사용되기 때문에 다른 네트워크의 사설 IP주소와 중복될 수 있음
     * NAT(Network Address Translation)
      : IP 주소 변환 기술(사설 IP 주소와 공인 IP 주소를 변환)
      : 라우터와 공유기는 NAT 기능 내장
      : 사셜 IP를 사용하는 여러 호스트는 적은 수의 공인 IP 주소 공유 가능(N:1)

    - 정적 IP 주소
     : 정적 할당 방식으로 IP 부여(호스트에 직접 IP주소 부여)
     : IP주소, 서브넷마스크, 게이트웨이(라우터)주소, DNS주소
      = 기본 게이트웨이: 호스트가 속한 네크워크 외부로 나가기 위한 기본적인 첫 경로(첫 번째 홉) - 라우터(공유기) 주소
      = DNS주소: DNS서버의 주소
     : 호스트 수가 많아 질수록 관리 힘들고 중복되거나 잘못 입력할 수도 있음
    - 동적 IP 주소
     : 동적 할당 방식으로 IP주소를 프로토콜(DHCP)을 활용해 자동으로 할당하는 방식
     : DHCP(Dynamic Host Configuragtion Protocol)
      = 클라이언트와 DHCP서버 간 메시지 송수신을 통해 할당
       * DHCP 서버: 클라이언트에게 할당 가능한 IP주소 목록 관리하다 클라이언트가 IP주소 할당 요청 보낼시 할당해줌
        - DHCP로 할당받은 동적 IP주소는 사용할 기간이 정해짐(사용할 시간이 지나면 DHCP 서버로 반납됨)
     : IP주소 할당 과정에서 주고받는 메시지
      1) DHCP Discover: 클라이언트 -> DHCP 서버
       - DHCP서버 찾는 메시지(브로드캐스트로 전송)
       - 클라이언트는 아직 IP주소를 할당 받지 못했으므로 송신지 IP 주소는 0.0.0.0
      2) DHCP Offer: DHCP 서버 -> 클라이언트
       - 클라이언트에게 할당 가능한 IP주소 정보를 제안하는 메시지
       - 할당 가능한 IP주소, 서브넷 마스크, 임대 기간 등의 정보 포함
      3) DHCP Request: 클라이언트 -> DHCP 서버
       - DHCP Offer 메시지에 대한 응답(브로드캐스트로 전송)
      4) DHCP Acknowledgment(DHCP ACK): DHCP서버 -> 클라이언트
       - 최종 승인 메시지
       - 할당받은 IP주소를 자신의 IP주소로 설정(임대기간 동안 사용)
        * 임대 갱신
         : IP주소 임대기간이 끝나기 전에 임대 기간을 연장(두 차례 자동으로 수행후 자동 임대 갱신 모두 실패하면 IP주소 반납)

    - 예약주소
     : 특수한 목적을 위해 예약된 IP주소
     : 127.0.0.1
      = 루프백 주소, 로컬 호스트(자기 자신을 가리키는 특별한 주소
      = 전송된 패킷이 자기 자신에게 되돌아옴(테스트, 디버깅 용도로 사용)
     : 0.0.0.0/8 (RFC 6890)
      = 호스트가 IP주소를 할당 받기 전에 임시로 할당되는 IP주소
      = 특별히 지칭할 IP주소가 없을 때 사용되는 IP주소
     : 0.0.0.0/0
      = 모든 임의의 IP 주소(디폴트 라우트를 나타내기 위해 사용)
       * 디폴트 라우트
        - 패킷을 어떤 IP주소로 전달할지 결정하기 어려울 경우 기본적으로 패킷을 전달할 경로

    - 라우터
     : 네트워크 간 통신을 가능하게 하는 네트워크 계층 장비
     : 패킷은 여러 라우터를 가쳐 다양한 경로로 이동할 수 있
     : 라우팅 과정(홉 수) 확인
      = window: tracert wwww.google.com
      = linux or macOS: tracerotue wwww.google.com
    - 라우팅
     : 라우팅 테이블
      = 특정 수신지까지 도달하기 위한 정보를 명시한 표(라우터는 라우팅 테이블을 참고해 수신지까지 도달 경로 판단)
      = 라우팅 테이블에 포한된 정보(라우팅 방식, 호스트 환경에 따라 달라질 수 있음)
       1) 수신지 IP주소와 서브넷 마스크: 최종적으로 패킷을 전달할 대상
       2) 다음 홉(게이트웨이): 다음으로 거쳐야 할 호스트의 IP주소나 인터페이스 
       3) 네트워크 인터페이스: 패킷을 내보낼 통로(어떤 인터페이스(NIC)로 패킷을 내보내야 하는지)
       4) 메트릭: 해당 경로로 이동하는데 드는 비용
        ex) 수신지 IP 주소 |  서브넷 마스크  |  게이트웨이  | 인터페이스 | 메트릭
             192.168.2.0     255.255.255.0   192.168.2.1     eth0        30
           : 수신지가 192.168.2.0/24의 주소 범위를 가진 패킷을 eht0를 통해 192.168.2.1로 전송(비용은 30)
     : 디폴트 라우트(default route): 라우팅 테이블에 경로가 없을 때 사용
      = 기본적으로 패킷을 내보낼 경로(모든 IP주소 의미. 0.0.0.0/0)
        ex) 수신지 IP 주소 |  서브넷 마스크  |  게이트웨이  | 인터페이스 | 메트릭
             192.168.2.0     255.255.255.0   192.168.2.1     eth0        30
             0.0.0.0         0.0.0.0         192.168.0.1     eth1        30
           : 수신지 IP 주소가 1.2.11.22인 패킷을 받았을때 테이블에 등록된 정보가 없기 때문에 디폴트 라우트로 eth1을 통해 192.168.0.1로 전송
      = 일반적으로 기본 게이트웨이 주소 = 디폴트 라우트
      = 라우팅 테이블에 따로 경로가 등록되어 있지 않은 패킷들을 기본적으로 기본 게이트웨이(라우터)에게 전달
       * 정적 라우팅
        : 수동으로 구성된 라우팅 테이블 항목을 통해 수행되는 라우팅(사용자가 수동으로 직접 채워 넣음)
       * 동적 라우팅
        : 자동으로 라우팅 테이블 항목을 만들고 이용하는 라우팅
        : 네트워크 규모가 커지고 관리해야할 라우터가 늘어나면 정적 라우팅만으로 관리 힘듦
        : 라우팅 프로토콜
         = 라우터끼리 자신의 경로 정보를 교환하면서 최적의 경로를 찾기위한 프로토콜
        : 라우팅 테이블의 항목을 수동으로 입력할 필요없이 자동으로 갱신

------------------------------------------------------------------------------------------------------------------
  RFC(Request for Comments) 문서
   - 네트워크/인터넷 관련 신기술 제안,의견 등 남긴 문서
   - 세상에서 가장 정확한 네트워크 이론 지식
   - https://datatracker.ietf.org/doc/html/rfc791
