@Test
 - 테스트 케이스를 정의할 때 사용 (테스트 실행 시 호출. 개별 테스트 케이스를 구현)
  테스트 수명주기의 다양한 단계를 제어 (@BeforeEach, @AfterEach, @BeforeAll, @AfterAll 등)

@BeforeEach
 - 각 테스트가 실행되기 전에 실행되어야 하는 메서드를 정의

@AfterEach 
 - 각 테스트가 실행된 후에 실행되어야 하는 메서드를 정의

@BeforeAll 
 - 해당 테스트 클래스의 모든 테스트 메서드가 실행되기 전에 딱 한 번 실행되어야 하는 메서드를 정의
 - static 메서드로 정의 되야함

@AfterAll 
 - 해당 테스트 클래스의 모든 테스트 메서드가 실행된 후에 딱 한 번 실행되어야 하는 메서드를 정의
 - static 메서드로 정의 되야함

@DisplayName("테스트 1")
 - 테스트 클래스나 메서드에 대한 사람이 읽을 수 있는 이름을 제공

@Disabled("이유를 설명하는 메시지")
 - 테스트를 비활성화 

@Nested 
 - 중첩된 테스트 클래스를 정의(테스트를 논리적 그룹으로 구성할 수 있음)
```
 @Nested
 @DisplayName("특정 상황에서")
 class WhenSituation {
     @Test
     void testInSituation() {
         // 테스트 코드
     }
 }
```

@Tag 
 - 테스트에 태그를 지정(테스트를 필터링할 수 있음)

@RepeatedTest(10)
 - 테스트를 여러 번 반복해서 실행

@ParameterizedTest
 - 파라미터를 제공하여 여러 다른 값을 가지고 동일한 테스트를 반복 실행
```
 @ParameterizedTest
 @ValueSource(strings = {"첫 번째 문자열", "두 번째 문자열"})
 void parameterizedTest(String arg) {
     assertNotNull(arg);
 }
```

@WebMvcTest
 - Spring MVC 애플리케이션에 대한 경량화된 테스트 컨텍스트 제공
 - 주로 컨트롤러 계층의 테스트에 사용 (컨트롤러와 관련된 빈들만 로드)
   서비스 레이어, 데이터 레이어의 빈은 @MockBean를 사용하여 테스트

@MockBean
 - 이미 정의된 빈을 대체하거나 새로운 모의 빈을 정의할 때 사용 (실제 데이터베이스 접근 없이 테스트를 수행)


