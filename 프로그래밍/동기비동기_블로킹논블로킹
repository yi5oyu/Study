동기(Synchronous): 요청한 작업의 결과를 기다리는 방식
 - 순차적 실행
 - 이전 작업이 완료되어야 다음 작업 진행
 - 결과를 즉시 받아서 처리

비동기(Asynchronous): 요청한 작업의 결과를 기다리지 않고 다른 작업을 진행하는 방식
 - 동시 실행 가능
 - 작업 완료를 기다리지 않음
 - 콜백, Promise, 이벤트로 결과 처리

동기 vs 비동기: 결과 확인 여부

블로킹(Blocking): 호출된 함수가 자신의 작업을 완료할 때까지 제어권을 돌려주지 않는 방식
 - 호출자가 대기 상태
 - 다른 작업 불가능
 - 작업 완료까지 프로그램 정지

논블로킹(Non-blocking): 호출된 함수가 즉시 제어권을 돌려주는 방식
 - 즉시 제어권 반환
 - 다른 작업 계속 가능
 - 작업 완료 여부와 관계없이 진행

블로킹 vs 논블로킹: 제어권 반환 시기

---

동기 + 블로킹: 결과를 기다리고, 제어권도 안 돌려받음
 - 완료될 때까지 아무것도 못함
 - 간단한 스크립트, 순차 처리

동기 + 논블로킹: 결과는 기다리지만, 제어권은 즉시 받음
 - 계속 확인하면서 기다림(Polling)
 - CPU 자원 낭비 가능성
 - 게임 루프, 실시간 모니터링

비동기 + 블로킹: 결과는 나중에 받지만, 제어권은 안 돌려받음
 - 여러 이벤트 중 하나를 기다릴 때 사용
 - 시스템 프로그래밍, 이벤트 처리

비동기 + 논블로킹: 결과도 나중에 받고, 제어권도 즉시 받음
 - 가장 효율적인 방식
 - 웹 애플리케이션, 고성능 서버
