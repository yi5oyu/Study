AWS EC2 (AMI2023 centos7)

Docker Engine 설치할 수 있도록 저장소 추가
 : sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
Docker 설치
 : sudo yum install docker-ce docker-ce-cli containerd.io -y
Docker 버전 확인
 : docker -v
시작
 : sudo systemctl start docker
부팅시 자동 시작
 : sudo systemctl enable docker
상태 확인
 : sudo systemctl status docker

Dockerfile 을 이용한 이미지 빌드 (Dockerfile 작성)
 : docker build -t dockerhub-username/repository_name:tag .
빌드한 이미지 docker-hub에 푸시
 : docker login
 : docker push dockerhub-username/repository_name:tag
도커 실행
 : docker run -d -p 8080:8080 --name container_name dockerhub-username/repository_name:latest
  // -d: 컨테이너를 백그라운드에서 실행
  // -p 8080:8080: 호스트의 8080 포트를 컨테이너의 8080 포트에 매핑 (http://IP주소 or 도메인:8080 에 접근하면 컨테이너 내부의 8080 포트로 전달)
  // --name: 컨테이너 이름
  // dockerhub-username/repository_name:latest 이미지 사용

Docker hub 
 로그인
  : docker login [옵션] [서버명]
   // -u, --username="사용자명"
   // -p, --password="비밀번호"
   // -e, --email="이메일"
   - 로그인 성공 -> Login Succeeded
   - 서버명 생략하면 Docker hub에 엑세스됨. 로컬 환경에 Docker repository가 있는 경우 서버명 입력
 로그아웃
  : docker logout [서버명]

-- 도커 이미지
이미지 목록
 : docker images [옵션] [repository명]
  // -a, --all=false: 모든 이미지 표시
  // --digests=false: digest 표시
  // --no-trunc=false: 모든 결과 표시
  // -q, -quiet=false: Docker 이미지 ID만 표시
이미지 다운로드 (Pull)
 : docker pull [이미지 이름]:[태그] ex) docker pull nginx:latest or docker pull dockerhub_username:repository_name:tag
이미지 삭제
 : docker rmi [이미지 ID or 이름]
  // -f, --force=false: 강제 삭제
  // --no-prune=false: 태그가 없는 부모 이미지 삭제하지 않음
이미지 세부 정보 확인
 : docker inspect [옵션] [컨테이너 or 이미지 이름(ID)]
  // 이미지 ID, 생성일, Docker 버전, 이미지 생성자, CPU 등 (JSON 형식으로 표시)
이미지 태그 설정
 : docker tage [이미지명]:[태그명] [Docker Hub 사용자명]/[이미지명]:[태그명]
  - 사용하고 있는 이미지명:태그명을 변경함 (rename 이미지 ID는 값음)
이미지 검색
 : docker search [옵션] [검색 키워드]
  // --automated=false: Automated Build만 표시 
  // --no-trunc=false: 모든 결과 표시
  // -s[--stars=0]: 특정 개수 이상의 별 수
  - NAME(이미지명), DESCRIPTION(이미지 설명), STARS(별 수), OFFICIAL(공식 이미지), AUTOMATED(Dockerfile 기반으로 자동 생성된 이미지)
  - 공식 Docker 이미지인 경우 OFFICIAL -> [OK] 표시됨
이미지 업로드 (Push)
 : docker push [Docker 사용자명]/[이미지명]:[테그명] 

-- 컨테이너
컨테이너 생성
 : docker create
실행중인 컨테이너
 : docker ps
모든 컨테이너 목록
 : docker ps -a
컨테이너 시작
 : docker start [컨테이너 ID 또는 이름]
컨테이너 중지
 : docker stop [컨테이너 ID 또는 이름]
컨테이너 재시작
 : docker restart [컨테이너 ID 또는 이름]
컨테이너 삭제
 : docker rm [컨테이너 ID 또는 이름]
컨테이너 로그 확인
 : docker logs [컨테이너 ID 또는 이름]
컨테이너 내부로 진입
 : docker exec -it [컨테이너 ID 또는 이름] /bin/bash or /bin/sh

/* digests - https://malwareanalysis.tistory.com/213
 레이어 데이터를 해시한 결과

 도커 이미지는 레이어(layer)와 메타정보로 구성되어 있음
 docker inspect -> RootFS -> Layers 필드
  - 레이어 메타정보 id: sha256으로 시작하는 숫자
  - 도커 이미지 레이어 메타정보 /var/lib/image/<storage-driver>/layerdb/sha256 에 저장 되어 있음

  레이어 digest 위치는 /var/lib/docker/<storage-driver> 에 저장됨 
  레이어 메타정보에서 cache-id파일에 레이어 digest가 있음
*/

/* 

*/
