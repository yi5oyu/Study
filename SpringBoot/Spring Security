스프링 기반 웹 애플리케이션 인증 권한을 담당 (스프링 하위 프레임워크)
인증(authenticate): 사용자의 신원을 확인하는 프로세스(로그인)
권한(authorize): 인증된 사용자가 어떤 접근 권한을 가지고 어떤 일을 할 수 있는지 관리

의존성 설정 
 build.gradle
 dependencies {
   implementation 'org.springframework.boot:spring-boot-starter-security'
 }

인증을 위한 로그인 화면
기본값
 - ID: user
 - PW: spring boot 실행시 콘솔창에 생성됨 (Using generated security password: cb09ec7d-69a0-488b-be6a-1ca338772be0)

스프링 시큐리티 설정 파일
SecurityConfig.java

// 모든 요청 URL에 클래스(SecurityFilterChain)가 필터로 적용
// URL별로 특별한 설정을 할 수 있음

// 환경 설정 파일 어노테이션
@Configuration
// 모든 요청 URL이 스프링 시큐리티의 제어를 받도록 만드는 애너테이션 (스프링 시큐리티 활성화)
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

        http
            // 인증되지 않은 모든 페이지 요청 허락
            .authorizeHttpRequests((authorizeHttpRequests) -> authorizeHttpRequests
                .requestMatchers(new AntPathRequestMatcher("/**")).permitAll())
            // CSRF 처리 시 H2 콘솔 예외 처리
            .csrf((csrf) -> csrf
                .ignoringRequestMatchers(new AntPathRequestMatcher("/h2-console/**")))
            // X-Frame-Options 헤더 DENY 대신 SAMEORIGIN으로 설정
            .headers((headers) -> headers
                .addHeaderWriter(new XFrameOptionsHeaderWriter(
                    XFrameOptionsHeaderWriter.XFrameOptionsMode.SAMEORIGIN)))
        ;
        return http.build();
    }
}





/*
H2 콘솔 오류 (403 Forbidden)
 스프링 시큐리티의 CSRF 방어 기능
 스프링 시큐리티에 의해 이와 같은 CSRF 토큰이 자동 생성됨
  - input 요소가 <form> 태그 안에 CSRF 토큰 생성, 전송해 실제 웹 페이지에서 작성한 데이터가 전달되는지를 검증
프레임 화면 깨짐
 프레임에 포함된 웹 페이지가 동일한 사이트에서 제공할 때에만 사용이 허락됨
 헤더 값이 DENY인 경우 오류 발생
*/
