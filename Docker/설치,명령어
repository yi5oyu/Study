AWS EC2 (AMI2023 centos7)

Docker Engine 설치할 수 있도록 저장소 추가
 : sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
Docker 설치
 : sudo yum install docker-ce docker-ce-cli containerd.io -y
Docker 버전 확인
 : docker -v
시작
 : sudo systemctl start docker
부팅시 자동 시작
 : sudo systemctl enable docker
상태 확인
 : sudo systemctl status docker
관리자 권한
 : docker@default: ~$ sudo su
Docker 실행 환경 확인
 : docker info

Dockerfile 을 이용한 이미지 빌드 (Dockerfile 작성)
 : docker build -t dockerhub-username/repository_name:tag .
빌드한 이미지 docker-hub에 푸시
 : docker login
 : docker push dockerhub-username/repository_name:tag
도커 실행
 : docker run -d -p 8080:8080 --name container_name dockerhub-username/repository_name:latest
  // -d: 컨테이너를 백그라운드에서 실행
  // -p 8080:8080: 호스트의 8080 포트를 컨테이너의 8080 포트에 매핑 (http://IP주소 or 도메인:8080 에 접근하면 컨테이너 내부의 8080 포트로 전달)
  // --name: 컨테이너 이름
  // dockerhub-username/repository_name:latest 이미지 사용

Docker hub 
 로그인
  : docker login [옵션] [서버명]
   // -u, --username="사용자명"
   // -p, --password="비밀번호"
   // -e, --email="이메일"
   - 로그인 성공 -> Login Succeeded
   - 서버명 생략하면 Docker hub에 엑세스됨. 로컬 환경에 Docker repository가 있는 경우 서버명 입력
 로그아웃
  : docker logout [서버명]

-- 도커 이미지
이미지 목록
 : docker images [옵션] [repository명]
  // -a, --all=false: 모든 이미지 표시
  // --digests=false: digest 표시
  // --no-trunc=false: 모든 결과 표시
  // -q, -quiet=false: Docker 이미지 ID만 표시
이미지 다운로드 (Pull)
 : docker pull [이미지 이름]:[태그] ex) docker pull nginx:latest or docker pull dockerhub_username:repository_name:tag
이미지 삭제
 : docker rmi [이미지 ID or 이름]
  // -f, --force=false: 강제 삭제
  // --no-prune=false: 태그가 없는 부모 이미지 삭제하지 않음
이미지 세부 정보 확인
 : docker inspect [옵션] [컨테이너 or 이미지 이름(ID)]
  // 이미지 ID, 생성일, Docker 버전, 이미지 생성자, CPU 등 (JSON 형식으로 표시)
이미지 태그 설정
 : docker tage [이미지명]:[태그명] [Docker Hub 사용자명]/[이미지명]:[태그명]
  - 사용하고 있는 이미지명:태그명을 변경함 (rename 이미지 ID는 값음)
이미지 검색
 : docker search [옵션] [검색 키워드]
  // --automated=false: Automated Build만 표시 
  // --no-trunc=false: 모든 결과 표시
  // -s[--stars=0]: 특정 개수 이상의 별 수
  - NAME(이미지명), DESCRIPTION(이미지 설명), STARS(별 수), OFFICIAL(공식 이미지), AUTOMATED(Dockerfile 기반으로 자동 생성된 이미지)
  - 공식 Docker 이미지인 경우 OFFICIAL -> [OK] 표시됨
이미지 업로드 (Push)
 : docker push [Docker 사용자명]/[이미지명]:[테그명] 
tar 파일에서 이미지 생성
 : docker import [파일 or URL] - [이미지명]:[태그명]
이미지 저장
 : docker save [옵션] [파일명] [이미지명]
이미지 되돌리기
 : docker load [옵션]

-- 컨테이너
컨테이너 생성
 : docker create
컨테이너 생성 / 실행
 : docker run [옵션] [이미지명]:[태그명] [값]
  // docker run (컨테이너 생성) -it (콘솔에 결과 출력) --name "test" (컨테이너명) centos (이미지명) /bin/cal (컨테이너에서 실행하는 커맨드)
  // -a, --attach=[STDIN | STDOUT | STDERR]: 표준 입력 | 표준 출력 | 표준 에러 연결
  // --cidfile="파일명": 컨테이너 ID를 파일로 출력
  // -d, -detach=false: 컨테이너를 생성하여 백그라운드에서 실행
  // -i, --interactive=false: 컨테이너 표준 입력 열기
  // -t, --tty=false: 단말 디바이스 사용
  // --name: 컨테이너명
컨테이너 백그라운드 실행
  // -d, --detach: 백그라운드에서 실행
  // -u, --user="사용자명": 사용자명 입력
  // -restart= [no | on-failure|on-failure:횟수n|always]: 커맨드 실행 결과에 따라 재기동
  // --rm: 커맨드 실행 완료 후 컨테이너 자동 삭제
컨테이너 네트워크 설정
  // --add-host=[호스트명:IP 주소]: 컨테이너의 /etc/hosts에 호스트명과 IP 주소 설정
  // --dns=[IP 주소]: DNS 서버의 IP 주소 설정
  // --expose=[포트 번호]: 포트 번호 할당
  // --mac-address=[MAC 주소]: 컨테이너의 MAC 주소 설정
  // --net=[bridge|none|container:[nameId]|host]: 컨테이너의 네트워크 설정
  // -h, --hostname="호스트명": 컨테이너의 호스트명 설정
  // -P, --publish-all=[true|false]: 임의의 포트를 컨테이너에 할당
  // -p [호스트 포트 번호]:[컨테이너 포트 번호]: 호스트와 컨테이너의 포트 매핑
  // --link=[컨테이너명:alias]: 다른 컨테이너에서 엑세스 시 이름 설정
컨테이너 리소스 설정
  // -c, --cpu-shares=0: CPU 리소스 분배
  // -m. --memory=[메모리 사용량]: 메모리 사용량 제한(단위: b, k, m, g 등)
  // -v, --volume=[호스트 폴더]:[컨테이너 폴더]: 호스트와 컨테이너 폴더 공유
컨테이너 환경 설정
  // -e, --env=[환경변수]: 환경변수 설정
  // -env-file=[파일명]: 파일에서 환경변수 설정
  // --privileged=[true |false]: privileged 모드에서 구동(호스트 커널 기능 사용 가능)
  // --read-only=[true |false]: 컨테이너의 파일 시스템을 read-only 설정
  // -w, --workdir=[경로]: 컨테이너의 작업 폴더 설정
실행중인 컨테이너 (목록)
 : docker ps [옵션]
  // -a, --all-false : 구동, 중지 상태의 모든 컨테이너 표시
  // --before="": 입력한 컨테이너명 or ID보다 이전에 구동된 컨테이너 표시
  // -f, --filter '[key]=[value]': 목록에 표시할 컨테이너 필터링
  // --format '[key]=[value]': 목록에 표시할 포맷 설정
  // -l, --latest=false: 마지막에 구동된 컨테이너 표시
  // --no-trunc=false: 생략된 정보 없이 모두 표시
  // -q, --quiet=false: 컨테이너 ID만 표시
  // -s, --size=false: 파일 사이즈 표시
  // --since="": 입력한 컨테이너명 or ID보다 이우헤 구동된 컨테이너 표시
  // CONTAINER ID(컨테이너 ID), IMAGE(컨테이너 기반이 된 이미지), COMMAND(컨테이너에서 실행 중인 커맨드). CREATED(컨테이너 생성 후 경과 시간), STATUS(컨테이너 상태(restarting | running | paused | exited)), PORTS(할당된 표트), NAMES(컨테이너명)
컨테이너 구동 확인
 : docker stats [컨테이너 ID 또는 이름]
  // CONTAINER(컨테이너명 or ID), CPU %(CPU 사용률), MEM USAGE/LIMIT(메모리 사용량, 컨테이너에서 사용할 수 있는 메모리 제한), MEM %(메모리 사용률), NET I/O(네트워크 I/O)
  // Ctrl + C: 커맨드 종료
컨테이너 시작(구동)
 : docker start [옵션] [컨테이너 ID 또는 이름]
  // -a, --attach=false: 표준 출력, 표준 에러 연결
  // -i, --interactive=false: 컨테이너 표준 입력 연결
컨테이너 중지
 : docker stop [옵션] [컨테이너 ID 또는 이름]
  // -t, --time=10: 컨테이너 중지 시간 지정 (default: 10초)
컨테이너 재시작
 : docker restart [옵션] [컨테이너 ID 또는 이름]
  // -t, --time=10: 컨테이너 재시작 시간 지정 (default: 10초)
컨테이너 삭제
 : docker rm [옵션] [컨테이너 ID 또는 이름]
  // -f, --force=false: 구동 중인 컨테이너 강제 삭제
  // -v, --volumes=false: 할당된 볼륨 삭제
컨테이너 일시정지 / 재시작
 : docker pause [컨테이너 ID 또는 이름]
 : docker unpause [컨테이너 ID 또는 이름]
컨테이너 접속
 : docker attach [컨테이너 ID 또는 이름]
  // Ctrl + P, Ctrl + Q: 컨테이너를 종료 시키지 않고 프로세스 빠져나옴
  // Ctrl + C: 커맨드 종료
컨테이너 로그 확인
 : docker logs [컨테이너 ID 또는 이름]
컨테이너 내부로 진입 (프로세스 실행)
 : docker exec [옵션] [컨테이너 ID 또는 이름] [커맨드] [값]
  // docker exec -it [컨테이너 ID 또는 이름] /bin/bash or /bin/sh
  // -d, --detach=false: 커맨드를 백그라운드에서 실행
  // -i, --interactive=false: 컨테이너 표준 입력 열기
  // -t, --tty=false: 단말 디바이스 사용
컨테이너 프로세스 확인
 : docker top [컨테이너 ID 또는 이름]
컨테이너 포트 상태 확인
 : docker port [컨테이너 ID 또는 이름]
컨테이너 이름 변경
 : docker rename [이전 (컨테이너명 or ID)] [변경할 (컨테이너명 or ID)]
컨테이너 내에서 파일 복사
 : docker cp [컨테이너명 or ID] : [컨테이너 내의 파일 경로] [호스트 폴더 경로]
 : docker cp [호스트 파일] [컨테이너명 or ID] : [컨테이너 내의 파일 경로]
컨테이너 내에서 파일 변경 이력 확인
 : docker diff [컨테이너명 or ID]
  // A (파일 추가), D (파일 삭제), C (파일 변경)
컨테이너에서 이미지 생성
 : docker commit [옵션] [컨테이너명 or ID] [이미지명]:[태그명]
  // -a, --author="~ ": 생성자
  // -m, --message="~ ": 메세지
  // -p, --pause=true: 컨테이너 일시 중지 후 commit
컨테이너를 tar 파일로 저장
 : docker export [컨테이너명 or ID]

/* digests - https://malwareanalysis.tistory.com/213
 레이어 데이터를 해시한 결과

 도커 이미지는 레이어(layer)와 메타정보로 구성되어 있음
 docker inspect -> RootFS -> Layers 필드
  - 레이어 메타정보 id: sha256으로 시작하는 숫자
  - 도커 이미지 레이어 메타정보 /var/lib/image/<storage-driver>/layerdb/sha256 에 저장 되어 있음

  레이어 digest 위치는 /var/lib/docker/<storage-driver> 에 저장됨 
  레이어 메타정보에서 cache-id파일에 레이어 digest가 있음
*/

/* 

*/
