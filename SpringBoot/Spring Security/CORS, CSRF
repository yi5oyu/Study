CORS (Cross-Origin Resource Sharing)
 웹 애플리케이션이 현재 도메인과 다른 도메인에서 리소스를 요청할 수 있도록 허용하는 방법을 정의한 웹 표준
 브라우저에서 보안 상의 이유로 다른 도메인에서 리소스를 요청할 때 발생하는 문제를 해결하기 위한 방법
 
 SOP(Same-Origin Policy)
  웹 브라우저는 보안상의 이유로 스크립트에서 다른 도메인의 리소스를 요청하는 것을 제한함
  (악의적인 스크립트가 사용자의 세션을 악용하거나, 민감한 데이터를 가져가는 것을 방지)

 서버와 클라이언트가 서로 다른 도메인에 있을 수 있음
 CORS 설정을 통해 두 도메인 간의 요청을 허용할 수 있음

서버에서 HTTP 헤더를 사용하여 특정 도메인, 메서드, 헤더에 대한 요청을 허용할 수 있도록 설정

Access-Control-Allow-Origin: 요청을 허용할 도메인을 지정합니다. 예: * (모든 도메인 허용), https://example.com (특정 도메인 허용)
Access-Control-Allow-Methods: 허용할 HTTP 메서드를 지정합니다. 예: GET, POST, PUT
Access-Control-Allow-Headers: 허용할 HTTP 헤더를 지정합니다.
Access-Control-Allow-Credentials: 자격 증명(쿠키, 인증 헤더 등)의 전송을 허용할지 여부를 지정

CSRF (Cross-Site Request Forgery)
 사용자가 의도하지 않은 요청을 다른 웹사이트에 보내게 만드는 공격 기법
 인증된 세션을 악용하여 악의적인 요청을 만들어 서버에 보냄
 서버에서 사용자의 인증된 세션을 악용하여 공격자가 의도하지 않은 행동을 수행하게 만드는 공격을 방지하기 위한 방법

CSRF 토큰: 서버는 폼 제출이나 API 요청 시, 사용자가 제공한 CSRF 토큰을 검증합니다. 이 토큰은 사용자의 세션에 저장되며, 폼이나 요청에 포함되어야 합니다. 공격자는 이 토큰을 알 수 없으므로, 서버는 해당 요청이 유효하지 않음을 판단할 수 있습니다.
Referer 헤더 검증: 요청의 출처를 검증하여 해당 요청이 허용된 출처에서 왔는지 확인할 수 있습니다.
SameSite 쿠키 속성: 이 속성을 사용하여 쿠키가 동일한 사이트에서 발생한 요청에서만 전송되도록 할 수 있습니다. 이를 통해 다른 도메인에서 발생한 CSRF 공격을 막을 수 있습니다.

