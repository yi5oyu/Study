동적 쿼리를 작성
 - 코드 가독성 향상 / 타입 안전성 보장
 - 복잡한 쿼리 깔끔하게 작성할 수 있음

Q 클래스를 사용하여 타입 안전한 쿼리를 작성할 수 있음

엔티티 클래스
  @Entity
  public class A {
      @Id
      private Long id;
  
      private String aaa;
      private String bbb;
      private int bbb;
  }

 Repository 인터페이스 확장 QueryDSL 추가
   public interface UserRepository extends JpaRepository<A, Long>, QuerydslPredicateExecutor<A> { ... }

 Q 클래스를 사용
  @Service
  public class AService {
      @Autowired
      private ARepository aRepository;
  
      public List<A> searchA(String abc, int ccc) {
          QUser a = QUser.a;
          Predicate predicate = a.aaa.eq(abc).and(a.bbb.gt(ccc)); // ccc 이상(greater than), abc와 같은 데이터
          return (List<A>) aRepository.findAll(predicate);
      }
  }

주요 클래스 / 인터페이스

 BooleanExpression
  - 조건문을 구성하는 데 사용되는 클래스 (여러 조건을 결합하고 논리 연산을 수행하는 데 유용)
   : Predicate 보다 구체적

 JPAQueryFactory
  - JPQL 스타일의 쿼리를 작성할 수 있음

    @Service
    public class AService {
        @Autowired
        private JPAQueryFactory queryFactory;
    
        public List<A> searchA(String abc, String b) {
            QUser a = QUser.a;
            return queryFactory.selectFrom(a)
                           .where(a.bbb.containsIgnoreCase(b)
                                  .and(a.aaa.eq(abc)))
                           .fetch();
        }
    }

 OrderSpecifier
  - 쿼리 정렬 (정렬 기준을 지정하여 결과를 정렬할 수 있음)

 Projections
  - 특정 DTO(Data Transfer Object)나 다른 형태로 매핑하는 데 사용 (복잡한 쿼리 결과를 간단하게 매핑할 수 있음)
