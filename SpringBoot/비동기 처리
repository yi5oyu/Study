동시에 많은 요청을 처리해야 하는 환경에서 비동기 처리 유용
비동기 메소드의 결과와 예외 처리 관리 방법을 구현하고 성능 테스트를 통해 비동기 처리가 애플리케이션에 미치는 영향을 정확히 평가하는 것이 중요
애플리케이션의 성능과 안정성을 최적화 할 수 있음

: Spring Boot 설정 (선택사항)
 - 프로젝트의 규모가 클 경우, 여러 설정 관리가 필요할 경우 설정 클래스 사용
  @EnableAsync 사용

  @Configuration
  @EnableAsync
  public class AppConfig {
      // 기타 설정
  }

: Service 메소드에 @Async 추가 / CompletableFuture 반환
  @Service
  public class AService {
  
      @Async
      public CompletableFuture<Void> a() {
          // 메소드 로직
          return CompletableFuture.completedFuture(null);  // 비동기 작업 완료 통지
      }
  }

: 컨트롤러에서 CompletableFuture 처리
  @RestController
  public class AsyncController {
      @Autowired
      private AService aService;
  
      @GetMapping("/aa")
      public CompletableFuture<Void> aaa() {
          return aService.a(); // 컨트롤러는 CompletableFuture를 반환하고, 결과 처리는 클라이언트 측에서 수행
      }
  }

+ 두 개 이상 메소드 비동기 처리
  @GetMapping("/AA")
  public CompletableFuture<Void> aaa() {
      CompletableFuture<Void> a = aService.a();
      CompletableFuture<Void> b = aService.b();

      return CompletableFuture.allOf(a, b);
  }

---
비동기 메소드의 실행 결과와 예외 처리를 관리하는 방법
 @Async 어노테이션을 사용하면 메소드가 Future or CompletableFuture or ListenableFuture 객체를 반환하도록 할 수 있음
 - 비동기 실행의 결과를 담거나 비동기 실행 중 발생한 예외를 처리하는데 사용될 수 있음

