https://www.javaguides.net/2020/07/three-tier-three-layer-architecture-in-spring-mvc-web-application.html
https://developer.mozilla.org/ko/docs/Glossary/MVC

Spring MVC
 - 웹/분산 애플리케이션 구축을 위해 설계된 Java 프레임워크
 - 웹 애플리케이션 및 RESTful 웹 서비스 개발 특화

MVC(Model-View-Controller) 디자인 패턴
 - 소프트웨어의 비즈니스 로직과 화면을 구분
  M 모델: 데이터, 비즈니스 로직 관리
  V 뷰: 레이아웃, 화면을 처리
  C 컨트롤러: 모델, 뷰로 명령 전달

- 3 Tier Layered Architecture
  Presentation
   : 애플리케이션의 user interface, 애플리케이션의 특징, 데이터 유저에게 제공
  Business logic 단계
   : 애플리케이션 핵심 기능, 의사결정, 계산, 평가 및 다른 두 계층에 전달되는 데이터 처리.
  Data access 단계
   : DB와 상호 작용 하여 애플리케이션 데이터 저장/수정

 Controller - Service - Repository
  Controller (Presentation layer)
   : 입력, 수신, 검증, Model 객체, ModelAndView 반환 기능 수행
  Service (Business logic layer)	
   : 계산, 데이터 변환, 데이터 프로세스, 레코드간 검증
  Repository (Data access layer)	
   : CRUD (관계형 또는 비관계형)

Entity: 데이터베이스 테이블과 매핑되는 객체. 데이터베이스 연산과 관련된 모든 작업 처리
DTO: 계층 간 데이터 전송을 위한 객체. Entity 객체의 데이터를 Presentation Layer에 맞게 변환하여 전달
Controller: 사용자 요청을 처리, DTO를 통해 데이터를 주고받음
Service: 비즈니스 로직을 처리, 엔티티와 DTO 변환
Repository: 데이터 접근 계층을 담당, 데이터베이스와 상호작용

내부 흐름 프로세스(DispatcherServlet 중심)
 1. 요청(Request)
  - 클라이언트 요청
   : 클라이언트(웹 브라우저)가 서버에 HTTP 요청을 하면 DispatcherServlet이 가로챔
    = DispatcherServlet은 특정 URL 패턴(예: /*, /app/*)을 처리하도록 구성(요청이 URL 패턴과 일치하면 처리를 시작하기 위해 DispatcherServlet으로 전달)
    = DispatcherServlet 설정: 웹 애플리케이션 web.xml, 스프링 부트 자동 설정
 2. 핸들러(Handler)
  - 핸들러 매핑(Handler Mapping)
   : 요청 처리해야 하는 컨트롤러를 결정
    = @RequestMapping, 구성 파일 사용해 정의됨
    = 요청 URL이 컨트롤러의 경로와 일치하는 경우 핸들러 매핑은 핸들러(컨트롤러 클래스 내의 특정 메서드)를 반환(인터셉터와 같은 추가 구성 요소가 존재하는 경우 같이 반환)
 3. 컨트롤러(Controller)
  - 핸들러 어댑터 호출
   : 올바른 핸들러 식별 후 DispatcherServlet은 이를 호출하기 위해 적절한 핸들러 어댑터 찾음
    = 핸들러 어댑터: 요청 유형, 입력 매개변수/반환 유형 기반으로 컨트롤러에서 올바른 메소드를 호출하는 역할
    * 들어오는 HTTP 요청 데이터(예: 매개변수)를 Controller 메서드가 작동할 수 있는 형식으로 변환
    * 컨트롤러가 종속성(예: 서비스, DAO)을 예상하는 경우 Spring은 메서드가 호출되기 전에 자동으로 주입
  - 컨트롤러 실행
   : DispatcherServlet은 핸들러 어댑터를 통해 컨트롤러 메소드 호출함
   : 컨트롤러는 요청을 처리하고 필요한 비즈니스 로직을 수행(서비스나 저장소를 사용하여 데이터 계층과 상호 작용)
  - 요청 처리
   : 요청을 처리하고 필요한 비즈니스 로직을 실행
   : 데이터베이스 쿼리, 데이터 처리 등 다양한 작업을 수행
 4. 모델(Model)
  - 컨트롤러에서 생성한 데이터 준비
 5. 뷰(View)
  - 뷰 이름
   : 요청을 처리한 후 컨트롤러는 모델과 뷰 이름을 DispatcherServlet에 반환
  - View Resolver
   : DispatcherServlet에 뷰 위치를 반환
   : DispatcherServlet은 JSP or Thymeleaf 템플릿 같은 구성을 기반으로 실제 물리적 보기(템플릿) 파일을 찾는 View Resolver에 보기 이름을 전달
  - 뷰 엔진
   : DispatcherServlet은 이제 모델 데이터를 뷰 템플릿에 바인딩하는 뷰 엔진을 호출(동적 데이터가 포함된 완전히 렌더링된 HTML 페이지 생성)
   : 뷰와 데이터를 HTML 응답으로 컴파일(모델 데이터로 채워진 HTML 페이지)
  - 반환
   : DispatcherServlet은 완전히 렌더링된 HTML 응답을 클라이언트의 브라우저로 다시 보냄
   : 브라우저는 이 페이지를 사용자에게 표시하고 요청 흐름을 마무리함

* DispatcherServlet
 - Spring MVC 애플리케이션의 모든 클라이언트 요청에 대한 단일 진입점 역할(전면 컨트롤러 역할)
 - 요청의 사전 및 사후 처리를 담당하고 이를 핸들러 또는 컨트롤러에 전달
