캐싱(Caching): 자주 사용되는 데이터를 더 빠른 저장소에 임시 보관하는 기법
 - 장점: 성능 향상, DB 부하 감소, 확장성 향상(동일한 DB 서버로 더 많은 사용자 처리 가능)
 - 단점: 데이터 일관성 문제, 메모리 사용량 증가, 복잡성 증가
 - 성능 수치: 응답 시간, DB 부하, 처리량
 
 캐시 사용 고려 요소
  - 동일한 쿼리가 자주 실행됨
  - 쿼리 실행 시간이 오래 걸림(>100ms)
  - 데이터 변경 빈도가 낮음
  - 읽기:쓰기 비율이 높음(10:1 이상)
  - 데이터베이스 부하가 높음

 캐시 키 설계
  - 명확하고 일관된 네이밍 컨벤션
  - 계층적 구조(user:123:profile, user:123:orders)
  - 충돌 방지를 위한 접두사 사용
  - 키 길이 최적화(Redis 키는 짧을수록 좋음)

 메모리 설정
  - InnoDB 버퍼 풀: 전체 RAM의 70-80% 권장
  - Redis: 전체 RAM의 50-60% 권장(다른 프로세스 고려)
  - Caffeine: JVM 힙의 20-30% 권장

 MySQL InnoDB 버퍼 풀
  - 버퍼 풀 크기 확인
    SHOW VARIABLES LIKE 'innodb_buffer_pool_size';
    1. 처음 쿼리: 디스크에서 데이터 읽기 -> 버퍼 풀에 저장
    2. 같은 쿼리: 버퍼 풀에서 바로 반환(매우 빠름)
    3. 메모리 부족 시: LRU 알고리즘으로 오래된 데이터 제거

 캐시 전략
  - Cache-Aside(Lazy Loading)
    1. 캐시에서 확인
    2. 캐시에 데이터 없을때 DB에서 조회
    3. 캐시에 저장
    ---
    1. DB 업데이트
    2. 캐시에서 삭제(다음 조회 시 새 데이터로 캐시됨)
    > 장점: 구현 간단함(일반적으로 사용됨), 실제 사용되는 데이터만 캐시
    > 단점: 첫 번째 요청은 느림(캐사에 데이터없어 DB에서 가져옴)
  - Write-Through(동기 업데이트)
    1. 캐시에서만 조회(항상 최신 데이터 가짐)
    ---
    1. DB 업데이트
    2. 캐시 즉시 업데이트
    > 장점: 데이터 일관성 보장, 읽기 성능 빠름
    > 단점: 쓰기 성능 느림(DB와 캐시에 모두 업데이트 됨)
  - Write-Behind(비동기 업데이트)
    1. 캐시에서만 조회(항상 최신 데이터 가짐)
    ---
    1. 캐시만 즉시 업데이트
    2. DB 업데이트는 큐에 추가됨(비동기)
    3. 백그라운드에서 DB 업데이트 처리
    > 장점: 쓰기 성능 매우 빠름, 읽기 성능 빠름
    > 단점: 데이터 일관성 위험(캐시와 DB 불일치 가능)

  무효화 전략
   - TTL(Time To Live): 시간 기반 만료
   - 이벤트: 모든 캐시 삭제, 관련 캐시 삭제, 업데이트 시 캐시 삭제
   - 태그: 캐시에 태그 정보 저장, 삭제 시 지정 태그 삭제

  최적화 전략
   - 캐시 워밍(Cache Warming): 서버 시작 시 자주 사용되는 데이터를 미리 캐시에 로드
   - 캐시 계층화: 캐시를 레벨 별로 나누고 순차적으로 확인
   - 캐시 압축: JSON 직렬화 후 압축 -> 압축 해제 후 JSON 파싱
    
   캐시 레벨
    - 로컬 캐시: 단일 서버 메모리(Caffeine, EhCache)
     > 장점: 매우 빠름, 네트워크 비용 없음
     > 단점: 서버별 데이터 불일치, 메모리 제한
    - 분산 캐시: 여러 서버 공유(Redis, Memcached)
     > 장점: 서버간 데이터 일관성, 확장성
     > 단점: 네트워크 지연, 복잡성 증가
   
  캐시 성능 측정/모니터링
   - 캐시 히트율: 90% 이상 목표
   - 응답 시간: 캐시 적용 전후 비교
   - 메모리 사용률: 80% 이하 유지
   - 캐시 키 개수: 급격한 증가 모니터링
   - 에러율: 캐시 장애 시 DB 부하 확인

  Spring Boot 캐싱
   - @EnableCaching: 캐싱 기능 활성화
   - @Cacheable: 조회 결과 캐싱
   - @CacheEvict: 캐시 무효화(삭제)
   - @CachePut: 캐시 갱신(항상 메서드 실행)
   - @Caching: 복합 캐시 연산

