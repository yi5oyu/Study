REST (Representational State Transfer)
 - 주고 받는 자원에 이름을 정하고 URI에 명시해 HTTP 메서드(GET, POST, PUT, DELETE)를 통해 해당 자원의 상태를 주고받는 것
API (Application Programming Interface)
 - 애플리케이션에서 제공하는 인터페이스. API를 통해 서버 or 프로그램 사이를 연결할 수 있음
 - 다양한 소프트웨어 애플리케이션이 서로 통신할 수 있도록 하는 일련의 규칙 및 프로토콜
RESTful
 - REST(Representational State Transfer) 아키텍처 스타일을 따르는 API

REST 특징
 유니폼 인터페이스
  일관된 인터페이스 
  REST 서버는 HTTP 표준 전송 규약을 따르기 때문에 언어와 플랫폼, 기술에 종속되지 않고 호환해 사용할 수 있음
 무상태성
  서버에 상태 정보를 따로 보관하거나 관리하지 않음. 요청을 개별적으로 처리
  비즈니스 로직의 자유도가 높고 설계가 단순함
 캐시 가능성
  HTTP 캐싱 기능을 적용할 수 있음. 응답과 요청 모두 캐싱 가능한지 명시해야 기능 사용 가능
  서버의 트랜잭션 부하가 줄어 효율적이며 사용자 입장에서 성능 개선
  (클라이언트에서 캐시에 저장해두고 같은 요청에 대해 해당 데이터를 사용)
 레이어 시스템
  서버의 복잡도와 관계없이 클라이언트는 서버와 연결되는 포인트만 알면 됨
 클라이언트-서버 아키텍처
  구조 분리 설계. REST 서버는 API 제공, 클라이언트는 사용자 정보 관리
  서로에 대한 의존성 낮춤

REST API
 - REST 아키텍처
  1. 클라이언트-서버 아키텍처
   : 클라이언트(UI/UX)와 서버(데이터, 로직, 리소스 등...)를 분리
    = 이식성과 확장성을 향상
  2. 무상태(Statelessness)
   : 서버에 클라이언트 컨텍스트가 저장되지 않음
    = 각 클라이언트 요청에는 서버가 이를 이해하고 처리하는 데 필요한 모든 정보가 포함되어야 함(서버는 세션 정보를 저장할 필요가 없음)
  3. 캐시 가용성(Cacheability) 
   : 명시적 캐싱 규칙
    = 서버 응답은 클라이언트가 오래되거나 부적절한 데이터를 재사용하는 것을 방지하기 위해 캐시 가능/불가능으로 정의(HTTP 캐시 헤더 사용해 정의됨)
   : 응답 재사용
    = 캐시 가능할 경우 클라이언트는 후속 요청에 응답 데이터 재사용 가능
     * Cache-Control: max-age=3600
  4. 균일한 인터페이스 
   : 클라이언트와 서버 간의 통일된 인터페이스(클라이언트와 서버 간의 통신을 위한 표준화된 방법으로 아키텍처를 단순화하고 분리)
    = 아키텍처 단순화, 상호 작용 가시성 향상
    0. 리소스 식별
     - 모든 리소스 URI(Uniform Resource Identifier)로 고유하게 식별
      * https://restapi.example.com/users/123
    0. 데이터 형식에 따른 리소스 조작
     - JSON or XML 사용하여 리소스와 상호 작용
    0. 자기 설명 메시지
     - 각 메시지에는 처리 방법을 설명하기에 충분한 정보가 포함되어 있음
      * Content-Type, Accept 같은 HTTP 헤더
    0. HATEOAS(Hypermedia as the Engine of Application State)
     - 클라이언트는 서버에서 동적으로 제공하는 링크를 따라 애플리케이션 탐색
      * /users?page=2 (리소스 링크 포함)
  5. 계층형 시스템(Layered System)
   - 각각 특정 기능을 가진 계층적 레이어로 구성
   - 확장성
    : 레이어를 독립적으로 확장하여 성능을 최적화할 수 있음
   - 보안
    : 계층별 보안 정책 시행 가능
   - 관리성
    : 계층 내에서 문제를 격리하여 유지 관리를 단순화
 - 장점
  : 단순성(표준 HTTP 메소드 및 상태 코드를 활용)
  : 확장성(상태 비저장 및 캐시 가능성은 확장성을 향상)
  : 유연성(다양한 유형의 통화를 처리하고 다양한 데이터 형식을 반환 가능)
  : 성능(JSON과 같은 경량 데이터 교환 형식은 성능을 향상)
  : 독립성(HTTP를 지원하는 모든 프로그래밍 언어와 함께 사용할 수 있음)

RESTful API
 - REST 아키텍처 원칙 준수(표준 HTTP 방법을 사용하여 웹 서비스와 상호 작용)
 - 생성, 읽기, 업데이트, 삭제할 수 있는 리소스로 처리(CRUD)
 - HTTP 메소드
  : GET 리소스 조회
  : POST 데이터 추가, 등록
  : PUT 리소스 수정(없으면 추가)
  : PATCH 리소스 부분 변경
  : DELETE 리소스 삭제
  : HEAD 리소스 조회(GET)(HTTP body 부분 제외하고 조회)
  : OPTIONS 통신 옵션 확인(메소드, 헤더 등...)
 - 데이터 형식
  : JSON(JavaScript Object Notation)/XML(eXtensible Markup Language)

URI 설계 규칙
 URI 마지막에 ( / ) 포함하지 않음
 언더바( _ ) 사용하지 않고 하이픈 ( - ) 사용
 행위(동사)가 아닌 결과(명사)를 포함
  - 행위는 HTTP 메서드로 표현. (ex. delete-product x -> product)
 소문자로 작성
 파일의 확장자 URI에 포함하지 않음
  - HTTP에서 제공하는 Accpet 헤더 사용

REST API 설계
 - 명명 규칙
  : 리소스 명사 사용
   * /users, /orders
  : 컬렉션 복수 명사 사용

* HATEOAS
 - REST를 다른 네트워크 애플리케이션 아키텍처와 구별하는 제약 조건
 - 클라이언트가 응용 프로그램 서버에서 동적으로 제공하는 하이퍼미디어를 통해 전적으로 네트워크 응용 프로그램과 상호 작용하는 것을 제안
