숫자의 이진 표현(0, 1)과 다양한 비트별 연산을 활용하여 특정 비트 설정, 지우기, 뒤집기 또는 확인과 같은 작업을 효율적으로 수행
하나의 정수(int)로 32개의 boolean 값을 저장할 수 있음
단일 정수를 사용하여 메모리 사용량을 크게 줄일 수 있음

비트 연산자
 AND(&): a & b 교집합
 OR (|): a | b 합집합
 XOR(^): a ^ b 배타적 논리합(같으면 0, 다르면 1)
 NOT(~): ~a (0 <-> 1)

1 << 10
0000 0000 0001
0100 0000 0000 (1을 10번 왼쪽 시프트)

ex)
 - a = 1, b = 3
  a = 0001, b = 0011
  a & b = 0001
  a | b = 0011
  a ^ b = 1110
  ~ a = 1110

비트 추가 
 - a |= (1 << 3)
  a = 1001

비트 삭제
 - a &= ~(1 << 3)
  a = 0001

비트 토글
 - a ^= (1 << 3)
  a = 1001

비트 확인
 - (a & (1 << 3)) != 0
  = 1(true)
