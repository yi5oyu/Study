다이나믹 프로그래밍(Dynamic Programming, DP)
 복잡한 문제를 간단한 여러 개의 문제로 나누어 푸는 방법
 시간 복잡도를 크게 줄일 수 있음
 메모리 사용량이 증가할 수 있음

최적 부분 구조(Optimal Substructure)
 큰 문제의 최적의 해결 방법이 작은 문제의 최적 해결 방법으로 구성 될 수 있음
중복되는 부분 문제(Overlapping Subproblems)
 동일한 작은 문제들이 반복적으로 나타날때 한 번만 해결하고 나중에 사용할 수 있도록 결과를 저장

 - 큰 문제를 작은 문제로 나눔
 - 작은 문제의 답을 저장하고 재사용
 - 중복되는 계산 줄임

Top-down(메모이제이션 memoization)
 - 재귀적으로 문제를 해결하면서 중간 결과를 저장
 - 이미 계산된 결과는 재계산하지 않고 저장된 값을 사용

Bottom-up(타뷸레이션 tabulation)
 - 가장 작은 부분 문제부터 시작하여 큰 문제로 확장
 - 결과를 테이블에 저장하며 진행
