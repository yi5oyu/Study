레이아웃 프래그먼트 선언
  <!DOCTYPE html>
  <html th:fragment="layout (title, content)" xmlns:th="http://www.thymeleaf.org">
  <head>
      <title th:replace="${title}">레이아웃 제목</title>
  </head>
  <body>
      <h1>레이아웃 H1</h1>
      <div th:replace="${content}">
          <p>레이아웃 내용</p>
      </div>
      <footer>
          레이아웃 푸터
      </footer>
  </body>
  </html>

layoutFile의 프래그먼트 layout을 불러와 대입
  <!DOCTYPE html>
  <html th:replace="~{layoutFile :: layout(~{::title}, ~{::section})}">
  <head>
      <title>페이지 제목</title>
  </head>
  <body>
  <section>
      <p>페이지 내용</p>
      <div>페이지에 포함됨</div>
  </section>
  </body>
  </html>

--------------------------------------------------------------

templates/footer.html
  <!DOCTYPE html>
  <html xmlns:th="http://www.thymeleaf.org">
    <body>
      <div th:fragment="copy">
        &copy; 2011 The Good Thymes Virtual Grocery
      </div>
    </body>
  </html>

  <body>
    <div th:insert="~{footer :: copy}"></div>
  </body>
  프래그먼트를 결과로 반환

  ~{templatename::selector}
  - 지정된 템플릿 전체를 포함 :: 프래그먼트 이름

 - 프래그먼트 생성
  <div th:fragment="greeting(name,age)">
      <p>Hello, <span th:text="${name} + ', ' + ${age}">Friend</span>!</p>
  </div>
 - 프래그먼트를 가져와 매개변수 넣어서 사용할 수 있음
  <div th:replace="~{::greeting('Bob','20')}"></div>
  <div th:replace="~{::greeting(${value1},${value2})}"></div>
 
  <div th:replace="~{::greeting(name=${value1}, age=${value2})}"></div>
   - 이렇게도 쓸 수 있음
  <div th:replace="~{::greeting}" th:with="name=${value1}, age=${value2}"></div>
   - 이것과 같음

base.html
  <head th:fragment="common_header(title,links)">
    <title th:replace="${title}">The awesome application</title>

    <link rel="stylesheet" type="text/css" media="all" th:href="@{/css/awesomeapp.css}">
    <link rel="shortcut icon" th:href="@{/images/favicon.ico}">
    <script type="text/javascript" th:src="@{/sh/scripts/codebase.js}"></script>

    <th:block th:replace="${links}" />
  </head>

프래그먼트를 지정
 - base.html을 호출해 사용
  <head th:replace="~{ base :: common_header(~{::title},~{::link}) }">
    <title>Awesome - Main</title>

    <link rel="stylesheet" th:href="@{/css/bootstrap.min.css}">
    <link rel="stylesheet" th:href="@{/themes/smoothness/jquery-ui.css}">
  </head>
 - 호출 결과
  <head>
    <title>Awesome - Main</title>
  
    <link rel="stylesheet" type="text/css" media="all" href="/css/awesomeapp.css">
    <link rel="shortcut icon" href="/images/favicon.ico">
    <script type="text/javascript" src="/sh/scripts/codebase.js"></script>
  
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/themes/smoothness/jquery-ui.css">
  </head>

비어있는 프래그먼트 사용
  <head th:replace="~{ base :: common_header(~{::title},~{}) }">
    <title>Awesome - Main</title>
  </head>
   - <th:block th:replace="${links}" /> 제거된 결과 호출

노오페레이션 사용 (_)
  <head th:replace="~{base :: common_header(_,~{::link})}">
    <title>Awesome - Main</title>
  
    <link rel="stylesheet" th:href="@{/css/bootstrap.min.css}">
    <link rel="stylesheet" th:href="@{/themes/smoothness/jquery-ui.css}">
  </head>
   - 첫번째 인자는 아무것도 하지않음

프래그먼트의 고급 조건부 삽입
  <div th:insert="${user.isAdmin()} ? ~{common :: adminhead} : ~{}"></div>
   - 관리자일땐 common :: adminhead 프래그먼트를 삽입 / 아닐 경우 삽입 없음
  <div th:insert="${user.isAdmin()} ? ~{common :: adminhead} : _">
    Welcome [[${user.name}]], click <a th:href="@{/support}">here</a> for help-desk support.
  </div>
   - false 일땐 변화 없음
프래그먼트 자체의 존재 여부를 조건으로 사용
 <div th:insert="~{common :: salutation} ?: _">
     Welcome [[${user.name}]], click <a th:href="@{/support}">here</a> for help-desk support.
 </div>

```
 - th:with
  <div th:with="name=${user.name}, age=${user.age}">
    <p>Hello, <span th:text="${name}"></span>! You are <span th:text="${age}"></span> years old.</p>
  </div>

 - th:assert
  템플릿에서 특정 조건 확인하고 조건 충족되지 않으면 예외 발생
  <div th:assert="${condition}" th:text="${name}"></div>
   - 변수가 null이 아니거나 조건을 충족해야함. false : 예외

 - th:block
  렌더링을 위한 태그 (특정 조건이나 반복 작업을 수행하기 위해 사용)
  <th:block th:if="${user.isAdmin()}">
      <p>Welcome, Administrator!</p>
      <p>Manage your account here.</p>
  </th:block>
   - 특정 조건이 참이면 내부의 요소들을 렌더링
  <th:block th:each="item : ${items}">
    <li th:text="${item.name}"></li>
  </th:block>
   - 반복적으로 사용되는 HTML 요소들을 렌더링
   => HTML 구조 유지, 랜더링 효율

 - th:remove
  템플릿 프래그먼트 제거

    <tr class="odd" th:remove=" all or body or tag or all-but-first or none ">
      <td>파란 상추</td>
      <td>9.55</td>
      <td>아니오</td>
      <td>
        <span>0</span> 개의 댓글
      </td>
    </tr>

   - th:remove="all"
    포함된 태그와 모든 자식 제거
    호출 결과 : 전부 삭제
   - th:remove="body"
    포함된 태그를 제외. 모든 자식 제거
    호출 결과 :
    <tr class="odd"></tr>
   - th:remove="tag"
    태그만 제거
    호출 결과 :
    <td>파란 상추</td>
    <td>9.55</td>
    <td>아니오</td>
    <td>
        <span>0</span> 개의 댓글
    </td>
   - th:remove="all-but-first"
    반복되는 첫번째 요소를 제외한 나머지 전부 삭제
   - th:remove="none"
    모든 요소 출력

  조건으로 활용 할 수 있음
   <a href="/something" th:remove="${condition}? tag : none">제거되지 않을 링크 텍스트</a>
```
