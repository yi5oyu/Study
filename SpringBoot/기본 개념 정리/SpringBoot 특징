spring vs spring boot
 스프링 부트는 spring framework 개선한 것
  - 개발 환경 설정 간소화 : 미리 설정된 스타터 프로젝트로 외부 라이브러리를 최적화해 제공
  - WAS 내장(Tomcat) : jar 파일로 간편하게 배포 가능

의존성 관리 간소화
 스타터 : 일반적인 개발 시나리오에 필요한 의존성들을 하나의 묶음으로 제공
  단일 스타터에 포함된 여러 의존성 안에 들어 있는 각 의존성 내의 여러 라이브러리 버전이 모든 의존성에 맞게 동기화 (의존성 간에 어려운 버전 충돌 발생하지 않음)
  Spring Boot가 지정한 버전에 맞게 해결
  // POM : 빌드 도구에서 의존성을 가져오고 프로젝트 빌드에 사용하는 정보와 프로젝트 구성이 담긴 파일
  spring-boot-starter-web : 단일 애플리케이션에 필요한 기능을 모두 제공
 애플리케이션에 기능 전테를 추가하는데 필요한 작업을 줄여줌
 spring-boot-starter-parent가 검증된 조합을 제공

배포 간소화 : JAR
 실행 가능한 JAR는 내장된 서블릿 컨테이너를 포함하여 애플리케이션의 모든 종속성을 단일 JAR 파일에 패키징
 스프링 부트 플러그인이 모든 의존성을 결과 JAR에 압축. 단일 JAR를 완전히 자체적으로 실행 가능한 파일을 만듬
 생성된 JAR 파일은 간단한 명령어(예: java -jar my-application.jar)로 실행할 수 있습니다.
 외부 설정이나 설치 필요없음

자동 설정
 애플리케이션에 추가된 라이브러리를 실행하는데 필요한 환경 설정을 알아서 찾아줌
  - 의존성을 추가하면 프레임워크가 이를 자동으로 관리
 @ComponentScan : @Component이 붙은 클래스를 발견해 빈을 등록
 @EnableAutoConfiguration을 통해 spring-boot-autoconfigure 패키지 안에 spring.factories 파일을 추가해 다양한 자동 설정이 일부 조건을 거쳐 적용

내장 WAS
 특별한 설정 없이도 Tomcat 실행 가능 ( Jetty, Undertow 등 으로 대체 가능 )

모니터링
 Spring Boot Actuator : 서비스를 운영하는 시기에 해당 시스템이 사용하는 스레드, 메모리, 세션 등 주요 요소들 모니터링 

IoC 제어 역전 (Inversion of Control)
 사용할 객체를 직접 생성하지 않고 객체의 생명주기 관리를 스프링 컨테이너 or IoC 컨테이너에 위임
 제어 역전을 통해 의존성 주입, 관점 지향 프로그래밍 등이 가능
 
DI 의존성 주입
 객체를 직접 생성하지 않고 컨테이너가 생성한 객체를 주입받아 사용
  - 생성자
   @RestController
   public class DIController {
     MyService myService;
     @Autowired
     public DIController(MyService myService) {
       this.myService = myService;
     }
   }
  - 필드 객체 선언
   @RestController
   public class FieldInjectionController {
     @Autowired
     private MyService myService;
   }
  - setter 메서드
   @RestController
   public class SetterInjectionController {
     MyService myService;
     @Autowired
     public void setMyController(MyService myService) {
       this.myService = myService;
     }
   }

AOP 관점 지향 프로그래밍
 기능을 핵심 기능과 부가 기능으로 구분해 각각을 하나의 관점으로 봄
  목적을 처리하는 로직 의외 부가 기능 (ex. 로깅, 트랜잭션)
  동일한 기능을 수행하는 경우 유용함 (로직이 수행되기 전 or 후)
 로직에서 반복되는 부가 기능을 하나의 공통 로직으로 처리하도록 모듈화해 삽입
 - 컴파일 과정
 - 바이트 코드를 메모리에 로드하는 과정
 - 프락시 패턴을 이용한 방식

-


