Docker
 Linux 컨테이너 가상화 기술을 이용한 애플리케이션 실행 환경 플랫폼
 시스템 구축과 운영에 있어 지금까지 사람이 수행해왔던 업무중 많은 부분을 자동화하기 위한 플랫폼

Docker 이미지 생성
 애플리케이션 실행에 필요한 프로그램, 라이브러리, 미들웨어, os, 네트워크 설정 등을 하나로 모아 이미지 생성
 이미지를 중첩해서 사용할 수 있음. 구성 변경이 일어난 부분을 따로 관리
 컨테이너의 기반
 이미지
  : Docker에서 서버를 동작시키기 위하여 필요한 폴더 / 파일의 집합 (Linux 동작에 필요한 /etc, /bin 등)
Docker 컨테이너
 Linux상에서 컨테이너 단위로 서버를 구동
 Docker 이미지를 통해 여러 컨테이너를 구동시킬 수도 있음
 하나의 Linux 커널을 여러 컨테이너가 공유
 독립된 공간으로 관리
 라이프 사이클 (생성 구동 중지)
 컨테이너 생성
  : docker crate
   - 실행하면 이미지에 포함된 Linux 폴더 / 파일의 스냅샷을 만듬 (컨테이너를 구동할 수 있는 준비 상태)
 컨테이너 생성 / 구동
  : docker run
   - 이미지에서 컨테이너 생성하여 프로세스 구동
 컨테이너 구동
  : docker start
   - 중지 상태인 컨테이너를 구동 시킴
 컨테이너 중지
  : docker stop
   - 구동중인 컨테이너 중지
 컨테이너 삭제
  : docker rm
   - 컨테이너 삭제할때 중지 시킨 후 삭제

Docker 이미지 공개 밎 공유
Docker 레지스트리
 Docker 이미지 통합적으로 관리
 Docker Hub
  Ubuntu, CentOS 등 Linux 배포판의 기본 기능을 제공하는 베이스 이미지 배포
  이미지 중첩으로 미들웨어, 라이브러리 등 포함한 이미지 만듬
GitHub 위에서 Dockerfile을 관리하고 이미지를 자동 생성하여 DockerHub에 공개할 수 있음
 (Automated Build)

동작 구조
 Linux 커널의 namespace 기능 사용
  - 컨테이너라는 독립된 환경을 만들고 나눠 애플리케이션 실행 환경 만듬
  - nameapace : 합쳐진 데이터에 이름을 붙여 충돌 가능성을 낮추고 쉽게 참조할 수 있도록하는 기능
   6가지 독립된 환경 구축
    PID, Network, UID, MOUNT, UTS, IPC
 리소스 관리. cgroup
  - 여러 컨테이너에서 물리 머신의 리소스 공유하여 사용. cgroup을 이용하여 리소스 할당 등의 관리 수행
  - 한 컨테이너가 같은 OS상에서 동작하는 다른 컨테이너에 영향 주는 일을 막음
  (Linux에선 프로그램을 프로세스로 실행. 하나 이상의 쓰레드 단위로 동작. 쓰레드를 그룹화 하여 관리)
 네트워크 구성
 
