# include /etc/nginx/conf.d/*.conf;
# 역방향 프록시 서버로 사용하여 애플리케이션에 대한 요청을 처리할 수 있음. 이를 통해 로드 밸런싱, SSL 종료 및 정적 콘텐츠 제공 등의 기능을 구현할 수 있음

# Docker 사용
# : Nginx 설정 파일 작성
#  - Spring Boot 프로젝트 내에 Nginx 설정 파일 (프로젝트와 관련된 모든 설정 파일을 한 곳에 모아 관리)
#   . 프로젝트의 src와 같은 위치에 nginx.conf 파일 생성
#   . Spring Boot 애플리케이을 프록시할 Nginx 설정 파일 작성

# upstream: 서버 그룹 정의
# app_servers 라는 이름으로 정의된 서버. 요청이 이 서버들로 분산
upstream app_servers {
    server app1:8888;
    server app2:8888;
}

server { # 서버 블록 하나의 웹 서버
    listen 80; # 서버가 80번 포트(HTTP) (HTTP 프로토콜을 사용하여 요청을 수신하도록 설정)
    server_name example.com www.example.com; #  {도메인 or IP 주소} 이 서버 블록이 적용될 도메인 이름(ex.com) 또는 IP 주소를 지정

    location /.well-known/acme-challenge/ { # 이 경로(메인 소유권 확인을 위해 사용되는 특수 경로)에 도메인 소유권 확인 파일있음
        root /var/www/certbot; # Nginx는 해당 경로의 요청을 /var/www/certbot 디렉토리로 매핑 
    } # Let's Encrypt 서버는 Nginx를 통해 파일에 접근하여 도메인 소유권을 확인

    location / {
        return 301 https://$host$request_uri; # HTTP 요청을 HTTPS로 리디렉션 ($host : 요청된 호스트 이름, $request_uri : 요청된 URI)
    }
}

server {
    listen 443 ssl; # 서버가 443번 포트(HTTPS)를 수신하도록 설정, SSL을 사용
    server_name example.com www.example.com;
    ssl_certificate /etc/letsencrypt/live/{도메인 or IP 주소}/fullchain.pem; # SSL 인증서 파일의 경로를 지정
    ssl_certificate_key /etc/letsencrypt/live/{도메인 or IP 주소}/privkey.pem; # SSL 인증서의 개인 키 파일 경로를 지정
    include /etc/letsencrypt/options-ssl-nginx.conf; # 추가 SSL 설정 파일을 포함
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # Diffie-Hellman 매개변수 파일의 경로를 지정

    location / { # URL 경로가 루트(/)인 모든 요청을 처리하는 블록
        proxy_pass http://{Docker Compose 파일에서 Spring Boot 서비스 이름}:8888; # 요청을 http://springboot:8888로 프록시
        proxy_set_header Host $host; # 클라이언트의 원래 호스트 이름을 백엔드 서버로 전달
        proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 실제 IP 주소를 백엔드 서버로 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 모든 프록시 서버를 거친 클라이언트의 원래 IP 주소 목록을 전달
        proxy_set_header X-Forwarded-Proto $scheme; # 원래 요청의 프로토콜(http 또는 https)을 백엔드 서버로 전달
    }
}
