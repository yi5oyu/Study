인프라 구성 관리
 - 이미지에 각종 미들웨어 설치/설정 애플리케이션 실행 모듈을 deploy하여 모든 실행 기반을 Dockerfile 안에 저장
 - Dockerfile: 인프라 구성 방법을 저장하는 파일, Docker 상에서 동작하는 컨테이너 구성 정보를 기반으로 Docker 이미지 생성

커맨드 / 데몬 실행
 - 이미지에서 컨테이너를 생성한 뒤 서버 프로세스 등을 데몬으로 실행해야함

[명령어] [값]

명령어
 - FROM: 베이스 이미지 저장
  : FROM [이미지명]
  : FROM [이미지명]:[태그명]
  : FROM [이미지명]@[Digest]
   // 베이스 이미지 지정 
 - ADD: 파일 / 폴더 추가
  : ADD [호스트 파일 경로] [Docker 이미지 파일 경로]
  : ADD ["호스트 파일 경로" "Docker 이미지 파일 경로"]
   // 이미지에 호스트의 파일과 디렉터리 추가
   // ADD 명령어: 호스트의 파일/폴더, 원격 파일을 Docker 이미지의 파일 시스템에 다운로드(복사), 압축풀기
 - MAINTAINER: Dockerfile 생성자
  : MAINTAINER [Dockerfile 작성자]
 - COPY: 파일 복사
  : COPY [호스트 파일 경로] [Docker 이미지 파일 경로]
  : COPY ["호스트 파일 경로" "Docker 이미지 파일 경로"]
   // 이미지에 호스트 파일, 폴더를 복사 (복사하는 작업만 수행)
 - RUN: 커맨드 실행
  : RUN [실행하고자 하는 커맨드]
   // 애플리케이션, 미들웨어 설치/설정, 커맨드르 통한 환경 구축
    - Shell 형식으로 실행
      ex) RUN yum -y install httpd (아파치 설치)
    - Exec 형식으로 실행
      ex) RUN ["/bin/bash", "-c", "yum -y install httpd"] (아피치 설치)
 - VOLUME: 볼륨 마운트
  : VOLUME ["/마운트 포인트"]
   // 이미지에 볼륨 할당
   // 마운트 포인트를 생성하고 호스트와 다른 컨테이너에서 볼륨을 외부 마운트함
   // 로그용 이미지 생성(Dockerfile에서 VOLUME으로 로그가 저장될 위치 지정) -> 로그용 컨테이너 구동 -> 웹 서버용 이미지 생성 -> 웹 서버용 컨테이너 구동 -> 로그 확인
 - CMD: 데몬 실행
  : CMD [실행하고자 하는 커맨드]
   // 컨테이너에서 실행되는 커맨드. Dockerfile에는 한 개의 CMD 명령어만 입력할 수 있음 (여러 개 입력한 경우 마지막 커맨드만 적용)
    - Shell 형식으로 실행
      ex) CMD /usr/sbin/httpd -D FOREGROUND
    - Exec 형식으로 실행
      ex) CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]
 - ENTRYPOINT: 데몬 실행
  : ENTRYPOINT [실행하고자 하는 커맨드]
   // docker run 커맨드가 동작할 때 실행됨
    - Shell 형식으로 실행
      ex) ENTRYPOINT /usr/sbin/httpd -D FOREGROUND
    - Exec 형식으로 실행
      ex) ENTRYPOINT ["/usr/sbin/httpd", "-D", "FOREGROUND"]
     // Dockerfile에서 여러 번 사용 될 수 있음 (이전에 사용한 경로를 기준으로 한 상대 경로 설정됨)
 - LABEL: 라벨 설정
  : LABEL [key]=[값]
   // 버전, 커맨드 등의 정보를 이미지에 넣음
   // 공백: " ", 행 바꿈: \
 - USER: 사용자 설정
  : USER [사용자명/UID]
   // RUN, CMD, ENTRYPOINT 명령어를 실행시킬 사용자 설정
 - EXPOSE: 포트 export
  : EXPOSE [포트 번호]
   // Docker에서 실행 중인 컨테이너가 listen하고 있는 네트워크 포트 (컨테이너와 내부 연결) 
 - WORKDIR: 작업 폴더 지정
  : WORKDIR [작엽 폴더 경로]
   // RUN, CMD, ENTRYPOINT, COPY, ADD 명령을 실행하기 위한 작업 폴더 설정
 - ENV: 환경변수 설정
  : ENV [key] [값]
  : ENV [key]=[값]
    ex) key: myName, 값: "LEE"
 - ONBUILD: build 완료 후 실행될 명령어
  : ONBUILD [실행하고자 하는 커맨드]
   // build 완료 후에 실행되는 명령. Dockerfile에서 생성한 이미지를 베이스 이미지로 다른 Dokcerfile을 build할 때 실행할 커맨드를 입력하기 위해 사용됨
   // 베이스 이미지 생성 -> 웹 개발 -> 웹 서버용 이미지 생성 -> 웹 서버용 컨테이너 구동
Dockerfile로 Docker 이미지 생성
 : docker build -t [생성할 이미지명]:[태그명] [Dockerfile 경로]
  - 명령어에 따라 Docker 이미지 생성 / 중첩

/*
FROM openjdk:17-jdk-alpine
 # Docker 이미지의 베이스 이미지를 설정 (OpenJDK 17과 함께 Alpine Linux(Docker 이미지 크기를 줄이는 데 도움)를 포함하는 경량의 베이스 이미지)
 
WORKDIR /app
 # 컨테이너 내부에서 작업 디렉토리를 설정. 모든 명령은 이 디렉토리 내에서 실행 (/app 디렉토리가 존재하지 않으면 Docker가 자동으로 생성)

COPY build/libs/*.jar myapp.jar
 # build/libs 디렉토리 안의 첫 번째 JAR 파일을 myapp.jar 이름으로 복사 (build/libs 디렉토리 안 파일 이름이 aaa.jar 라면 myapp.jar 변경되어 복사됨)

ENTRYPOINT ["java", "-jar", "/app/myapp.jar"]
 # 컨테이너가 시작될 때 실행될 명령 설정 (Spring Boot 애플리케이션을 시작)

EXPOSE 8080
 # 컨테이너가 외부에 노출할 포트를 지정 (docker run -p 8080:8080 명령을 통해 호스트와 컨테이너의 8080 포트를 연결할 수 있음)
*/
